Overview

Create a program that implements the game Minesweeper. Modified from wikipedia
(https://en.wikipedia.org/wiki/Minesweeper_(video_game)):
The player is initially presented with a grid of undifferentiated squares. Some randomly
selected squares, unknown to the player, are designated to contain mines. Typically, the
size of the grid and the number of mines are set in advance by the user, either by
entering the numbers or selecting from defined skill levels, depending on the
implementation.

The game is played by revealing squares of the grid by clicking or otherwise indicating
each square. If a square containing a mine is revealed, the player loses the game. If no
mine is revealed, a digit is instead displayed in the square, indicating how many adjacent
squares contain mines; if no mines are adjacent, the square becomes blank, and all
adjacent squares will be recursively revealed. The player uses this information to deduce
the contents of other squares, and may either safely reveal each square or mark the
square as containing a mine.

In some versions, a question mark may be placed in an unrevealed square to serve as
an aid to logical deduction....The game is won when all minefree
squares are revealed,
because all mines have been located.

For this phase, you will implement Minesweeper (with a GUI). You may hardcode the size of the
game board to a 10x10 grid with 10 randomly placed mines. The user should be able to click a
cell to reveal it or to mark it as a mine. You may use a keyboard key press or a radio button
toggle to differentiate between these types of clicks. Once all mines are either marked, or are
the only squares left unrevealed,
the player wins the game.

Classes and GUIs

● Board: A class that contains the current game board state, which is a 2D array of Cells
(10x10), with 10 of them designated as mines. This class should have logic to reveal and
mark cells, and to determine when a player has won or lost the game. Remember that
when a cell is revealed, all of the adjacent blank cells (and their adjacent blank cells) are
also automatically revealed. Be very careful about how you use recursion here – don’t
create infinite loops! You may need more than one representation of the board. For
debugging purposes, have a method that will present the completely unmasked game
board.

● Cell: A class that contains the state for an individual cell, including if it is a mine or not,
how many cells around it are mines, if the player as flagged it as a mine, and if it has
been revealed. There should be methods that allow the Board class to reveal a cell (did
it uncover a mine, so the game is lost?), and to indicate what the board should display
for that cell (an “x” for not uncovered, a blank or number if uncovered and not a mine, a ?
for if the player flagged the cell as a mine).

● GUI: At the beginning of the game, the GUI should prompt the user to play the game by
presenting the completely masked board, indicating the number of mines and requesting
the user to reveal or mark a cell. Given correctly formatted input, it should invoke that
command on the Board object and print the current state of the game board (or a Game Over message). I recommend buttons for each square of the board – each of which is associated with a Cell in the Board.

Programmer Roles

Each student should take one of the three Classes/GUI and be the lead programmer. In addition, each student should take the lead in one of the following roles (but teams are expected to work together to review each other’s work and make sure no major mistakes are being made):
● Architect: Work out how the classes and GUI will work together for the final program. What methods will each class need? What data will each class need? Etc…
● Tester: Create unit tests for each class, and an overall test for the project. Make sure to test for boundary cases and malformed input.
● Document/Repo: Ensure all code is documented and committed properly, including test code.